@namespace("cwl.draft-2")
protocol File {

  import idl "expression.avdl";

  enum FileClass {
    FILE
  }

  /** Represents a file (or group of files if `secondaryFiles` is specified)
      that must be accessible by tools using standard POSIX file system call
      API such as open(2) and read(2). **/
  record File {

    /** Must be `File` to indicate this object describes a file. **/
    FileClass fileClass;

    /** The path to the file. **/
    string path;

    /** Optional hash code for validating file integrity.  Currently must be in
        the form "sha1$ + hexidecimal string" using the SHA-1 algorithm. **/
    union { null, string } checksum;

    /** Optional file size. **/
    union { null, long } size;

    /** A list of additional files that are associated with the primary file
        and must be transferred alongside the primary file.  Examples include
        indexes of the primary file, or external references which must be
        included when loading primary document.  A file object listed in
        `secondaryFiles` may itself include `secondaryFiles` for which the same
        rules apply. **/
    union { null, array<File> } secondaryFiles;
  }

  /** Define a file that must be placed in the designated output directory
      prior to executing the command line tool.  May be the result of executing
      an expression, such as building a configuration file from a template. **/
  record FileDef {

    /** The name of the file to create in the output directory. **/
    union { string, Expression } filename;

    /** If the value is a string literal or an expression which evaluates to a
        string, a new file must be created with the string as the file contents.

        If the value is an expression that evaluates to a File object, this
        indicates the referenced file should be added to the designated output
        directory prior to executing the tool.

        Files added in this way may be read-only, and may be provided
        by bind mounts or file system links to avoid
        unnecessary copying of the input file. **/
    union { string, Expression } fileContent;
  }
}
