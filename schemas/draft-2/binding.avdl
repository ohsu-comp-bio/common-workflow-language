@namespace("cwl.draft-2")
protocol Binding {

  import idl "expression.avdl";

  /** Only applies when `type` is `File`.  Describes files that must be
      included alongside the primary file.

      If the value is an expression, the context of the expression is the input
      or output File parameter to which this binding applies.
      If the value is a string, it specifies that the following pattern
      should be applied to the primary file:

        1. If string begins with one or more caret `^` characters, for each
          caret, remove the last file extension from the path (the last
          period `.` and all following characters).  If there are no file
          extensions, the path is unchanged.

        2. Append the remainder of the string to the end of the file path. **/
  record Binding {

    /** Only applies when `type` is `File`.  Read up to the first 64 KiB of
        text from the file and place it in the "contents" field of the file
        object for manipulation by expressions. **/
    union { null, boolean } loadContents;

    union { null, string, Expression, array<union { string, Expression }> } secondaryFiles;
  }

  /** When listed under `inputBinding` in the input schema, the term "value"
      refers to the the corresponding value in the input object.  For binding
      objects listed in `CommandLineTool.arguments`, the term "value" refers to
      the effective value after evaluating `valueFrom`.

      The binding behavior when building the command line depends on the data
      type of the value.  If there is a mismatch between the type described by
      the input schema and the effective value, such as resulting from an
      expression evaluation, an implementation must use the data type of the
      effective value.
        - **string**: Add `prefix` and the string to the command line.
        - **number**: Add `prefix` and decimal representation to command line.
        - **boolean**: If true, add `prefix` to the command line.  If false, add
            nothing.
        - **File**: Add `prefix` and the value of [`File.path`](#file) to the
            command line.
        - **array**: If `itemSeparator` is specified, add `prefix` and the join
            the array into a single string with `itemSeparator` separating the
            items.  Otherwise first add `prefix`, then recursively process
            individual elements.
        - **object**: Add `prefix` only, and recursively add object fields for
            which `inputBinding` is specified.
        - **null**: Add nothing. **/
  record CommandLineBinding {

    /** See Binding#Binding.loadContents. **/
    union { null, boolean } loadContents;

    /** See Binding#Binding.secondaryFiles. **/
    union { null, string, Expression, array<union { string, Expression }> } secondaryFiles;

    /** The sorting key.  Default position is 0. **/
    int position = 0;
    
    /** Command line prefix to add before the value. **/
    union { null, string } prefix;

    /** If true (default), then the prefix and value must be added as separate
        command line arguments; if false, prefix and value must be concatenated
        into a single command line argument. **/
    boolean separate = true;

    /** Join the array elements into a single string with the elements
        separated by by `itemSeparator`. **/
    union { null, string } itemSeparator;

    /** If `valueFrom` is a constant string value, use this as the value and
        apply the binding rules above.

        If `valueFrom` is an expression, evaluate the expression to yield the
        actual value to use to build the command line and apply the binding
        rules above.  If the inputBinding is associated with an input
        parameter, the "context" of the expression will be the value of the
        input parameter.

        When a binding is part of the `CommandLineTool.arguments` field,
        the `valueFrom` field is required. **/
    union { null, string, Expression } valueFrom;
  } 

  /** Describes how to generate an output parameter based on the files produced
      by a CommandLineTool.

      The output parameter is generated by applying these operations in
      the following order:
        - glob
        - loadContents
        - outputEval **/
  record CommandOutputBinding {

    /** See Binding#Binding.loadContents. **/
    union { null, boolean } loadContents;

    /** See Binding#Binding.secondaryFiles. **/
    union { null, string, Expression, array<union { string, Expression }> } secondaryFiles;

    /** Find files relative to the output directory, using POSIX glob(3)
        pathname matching.  If provided an array, find files that match any
        pattern in the array.  If provided an expression, the expression must
        return a string or an array of strings, which will then be evaluated as
        one or more glob patterns.  Only files which actually exist will be
        matched and returned. **/
    union { null, string, Expression, array<string> } glob;

    /** Evaluate an expression to generate the output value.  If `glob` was
        specified, the script `context` will be an array containing any files
        that were matched.  Additionally, if `loadContents` is `true`, the File
        objects will include up to the first 64 KiB of file contents in the 
        `contents` field. **/
    union { null,  Expression } outputEval;
  }
}
