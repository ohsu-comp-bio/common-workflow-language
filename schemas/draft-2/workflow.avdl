@namespace("cwl.draft-2")
protocol Workflow {

  import idl "process.avdl";
  import idl "datatype.avdl";

  /** The scatter method, as described in
      [workflow step scatter](#workflowstep). **/
  enum ScatterMethod {
    DOTPRODUCT,
    NESTED_CROSSPRODUCT,
    FLAT_CROSSPRODUCT
  }

  /** The input of a workflow step connects an upstream parameter (from the
      workflow inputs, or the outputs of other workflows steps) with the input
      parameters of the underlying process.

      ## Input object

      A WorkflowStepInput object must contain an `id` field in the form
      `#fieldname` or `#stepname.fieldname`.  When the `id` field contains a
      period `.` the field name consists of the characters following the final
      period.  This defines a field of the workflow step input object with the
      value of the `source` parameter(s).

      ## Merging

      If the sink parameter is an array, or named in a [workflow
      scatter](#workflowstep) operation, there may be multiple inbound data links
      listed in the `connect` field.  The values from the input links are merged
      depending on the method specified in the `linkMerge` field.  If not
      specified, the default method is "merge_nested".

      * **merge_nested**
        The input must be an array consisting of exactly one entry for each
        input link.  If "merge_nested" is specified with a single link, the value
        from the link must be wrapped in a single-item list.

      * **merge_flattened**
        1. The source and sink parameters must be compatible types, or the source
           type must be compatible with single element from the "items" type of
           the destination array parameter.
        2. Source parameters which are arrays are concatenated.
           Source parameters which are single element types are appended as
           single elements. **/
  record WorkflowStepInput {
  
    /** A unique identifier for this workflow input parameter. **/
    string id;

    /** Specifies one or more workflow parameters that will provide input to
        the underlying process parameter. **/
    union { null, string, array<string> } source;

    /** The method to use to merge multiple inbound links into a single array.
        If not specified, the default method is "MERGE_NESTED".
    union { null, LinkMergeMethod } linkMerge = "MERGE_NESTED";

    /** The default value for this parameter if there is no `source` field. **/
    union { null, Any } default;
  }

  /** Associate an output parameter of the underlying process with a workflow
      parameter.  The workflow parameter (given in the `id` field) be may be
      used as a `source` to connect with input parameters of other workflow
      steps, or with an output parameter of the process. **/
  record WorkflowStepOutput {

    /** A unique identifier for this workflow output parameter.  This is the
        identifier to use in the `source` field of `WorkflowStepInput` to
        connect the output value to downstream parameters. **/
    string id;

  }

  /** Describe an output parameter of a workflow.  The parameter must be
      connected to one or more parameters defined in the workflow that will
      provide the value of the output parameter. Extends OutputParameter. **/
  record WorkflowOutputParameter {

    /** See Parameter#OutputParameter.type. **/ 
    union { null, Datatype, OutputSchema, string, array<union { Datatype, OutputSchema, string }> } type;
    
    /** See Parameter#OutputParameter.label. **/ 
    union { null, string } label;

    /** See Parameter#OutputParameter.description. **/ 
    union { null, string } description;

    /** See Parameter#OutputParameter.streamable. **/ 
    boolean streamable = false;

    /** See Parameter#OutputParameter.default. **/ 
    union { null, Any } default; 

    /** Specifies one or more workflow parameters that will provide this output
        value. **/
    union { null, string, array<string> } source;

    /** The method to use to merge multiple inbound links into a single array.
        If not specified, the default method is "MERGE_NESTED". **/
    LinkMergeMethod linkMerge = "MERGE_NESTED";
  }

  /** A workflow step is an executable element of a workflow.  It specifies the
      underlying process implementation (such as `CommandLineTool`) in the `run`
      field and connects the input and output parameters of the underlying
      process to workflow parameters.

      # Scatter/gather

      To use scatter/gather,
      [ScatterFeatureRequirement](#scatterfeaturerequirement) must be specified
      in the workflow or workflow step requirements.

      A "scatter" operation specifies that the associated workflow step or
      subworkflow should execute separately over a list of input elements.  Each
      job making up a scatter operaution is independent and may be executed
      concurrently.

      The `scatter` field specifies one or more input parameters which will be
      scattered.  An input parameter may be listed more than once.  The declared
      type of each input parameter is implicitly wrapped in an array for each
      time it appears in the `scatter` field.  As a result, upstream parameters
      which are connected to scattered parameters may be arrays.

      All output parameter types are also implicitly wrapped in arrays.  Each job
      in the scatter results in an entry in the output array.

      If `scatter` declares more than one input parameter, `scatterMethod`
      describes how to decompose the input into a discrete set of jobs.

        * **dotproduct** specifies that each of the input arrays are aligned and one
            element taken from each array to construct each job.  It is an error
            if all input arrays are not the same length.

        * **nested_crossproduct** specifies the Cartesian product of the inputs,
            producing a job for every combination of the scattered inputs.  The
            output must be nested arrays for each level of scattering, in the
            order that the input arrays are listed in the `scatter` field.

        * **flat_crossproduct** specifies the Cartesian product of the inputs,
            producing a job for every combination of the scattered inputs.  The
            output arrays must be flattened to a single level, but otherwise listed in the
            order that the input arrays are listed in the `scatter` field.

      # Subworkflows

      To specify a nested workflow as part of a workflow step,
      [SubworkflowFeatureRequirement](#subworkflowfeaturerequirement) must be
      specified in the workflow or workflow step requirements. **/
  record WorkflowStep {

    /** The unique identifier for this workflow step. **/
    union { null, string } id;

    /** Defines the input parameters of the workflow step.  The process is
        ready to run when all required input parameters are associated with
        concrete values.  Input parameters include a schema for each parameter
        which is used to validate the input object.  It may also be used build
        a user interface for constructing the input object. **/
    array<WorkflowStepInput> inputs;

    /** Defines the parameters representing the output of the process.  May be
        used to generate and/or validate the output object. **/
    array<WorkflowStepOutput> outputs;

    /** Declares requirements that apply to either the runtime environment or
        the workflow engine that must be met in order to execute this workflow
        step.  If an implementation cannot satisfy all requirements, or a
        requirement is listed which is not recognized by the implementation, it
        is a fatal error and the implementation must not attempt to run the
        process, unless overridden at user option. **/
    union { null, array<ProcessRequirement> } requirements;

    /** Declares hints applying to either the runtime environment or the
        workflow engine that may be helpful in executing this workflow step.
        It is not an error if an implementation cannot satisfy all hints,
        however the implementation may report a warning. **/
    union { null, array<Any> } hints;

    /** A short, human-readable label of this process object. **/
    union { null, string } label;

    /** A long, human-readable description of this process object. **/ 
    union { null, string } description;

    /** Specifies the process to run. **/
    Process run;

    union { null, string, array<string> } scatter;

    /** Required if `scatter` is an array of more than one element. **/ 
    union { null, ScatterMethod } scatterMethod;
  }

  /** A workflow is a process consisting of one or more `steps`.  Each
    step has input and output parameters defined by the `inputs` and `outputs`
    fields.  A workflow executes as described in
    [execution model](#workflow_graph).

    # Dependencies

    Dependencies between parameters are expressed using the `source` field on
    [workflow step input parameters](#workflowstepinput) and [workflow output
    parameters](#workflowoutputparameter).

    The `source` field expresses the dependency of one parameter on another
    such that when a value is associated with the parameter specified by
    `source`, that value is propagated to the destination parameter.  When all
    data links inbound to a given step are fufilled, the step is ready to
    execute.

    # Extensions

    [ScatterFeatureRequirement](#scatterfeaturerequirement) and
    [SubworkflowFeatureRequirement](#subworkflowfeaturerequirement) are
    available as standard extensions to core workflow semantics.  **/
  record Workflow {

    /** See Process#Process.id. **/ 
    union { null, string } id;

    /** See Process#Process.inputs. **/ 
    array<InputParameter> inputs;

    /** See Process#Process.outputs. **/ 
    array<WorkflowOutputParameter> outputs;

    /** See Process#Process.requirements. **/ 
    union { null, array<ProcessRequirement> } requirements;

    /** See Process#Process.hints. **/ 
    union { null, array<Any> } hints;

    /** See Process#Process.label. **/ 
    union { null, string } label;

    /** See Process#Process.description. **/ 
    union { null, string } description;

    string class;

    /** The individual steps that make up the workflow.  Each step is executed
        when all of its input data links are fufilled.  An implementation may
        choose to execute the steps in a different order than listed and/or
        execute steps concurrently, provided that dependencies between steps
        are met. **/
    array<WorkflowStep> steps;
  }
}
